#+TITLE: Steckemacs
#+AUTHOR: steckerhalter

#+OPTIONS: toc:nil num:nil

* Steckemacs

An Emacs configuration that integrates around 60 modes (packages). Stock Emacs is not very useful and lacks many convenient commands. Over the years I've discovered many good extensions and added them to this setup. The goal is to keep everything in one file and not as many others to split it over lots of files and directories. Packages are retrieved from the Emacs package repositories on the internet on the first startup.

If you want to know more about how that works, read my blog entry here:  http://steckerhalter.co.vu/blog/201304/steckemacs

**To use this setup please use Emacs 24 or later. Older versions do not work properly.**

** Installation

As the whole setup is just one file the easiest way to use it is like this:

Change to a directory of your choice and clone **steckemacs**:

#+BEGIN_SRC shell
    cd <my directory>
    git clone https://github.com/steckerhalter/steckemacs.git
#+END_SRC

And symlink =.emacs.el= into your home directory:

#+BEGIN_SRC shell
    cd ~
    ln -s <path to the directory from above>/.emacs.el
#+END_SRC

That's it. Then you can run emacs and it should pick up the config, install all the packages and make you happy ;)

** Keyboard shortcuts

By using the =key-chord= mode we can avoid having to type C- or M- all the time. It allows for using keys pressed simultaneously and I'm using it quite often.

When I write =fg= as a key combo it means you would have to press =f= and =g= at the same time.

I only describe my custom key combinations currently. To learn the standard Emacs commands, go through the Tutorial =C-h t=, use =C-S-h= or =M-x= to see/filter the available commands/shortcuts.

| Topic                   | Combo      | Description                                                               |
|-------------------------+------------+---------------------------------------------------------------------------|
| *General*               | =C-c X=    | kill emacs (including the daemon if it is running)                        |
|                         | =C-S-h=    | show current keyboard shortcuts, allows search too                        |
|                         | =C-S-l=    | list available packages                                                   |
|                         | =C-h C-f=  | go to the definition of the function under cursor                         |
|                         | =C-h C-v=  | go to the definition of the variable under cursor                         |
| *Appearance*            | =C-c m=    | show/hide menu                                                            |
|                         | =C--=      | decrease the font size                                                    |
|                         | =C-==      | increase the font size                                                    |
|                         | =ln=       | show/hide the line numbers                                                |
|                         | =C-F8=     | show/hide comments                                                        |
| *Buffers / Files*       | =C-return= | buffer switcher (helm-mini)                                               |
|                         | =F6=       | delete the current buffer                                                 |
|                         | =F8=       | switch to the "last" buffer                                               |
|                         | =C-c r=    | revert a buffer to the saved state                                        |
|                         | =sc=       | switch to \*scratch\* buffer                                              |
|                         | =C-c n=    | copy the full path of the current file to the clipboard                   |
| *Windows / Frames*      | =C-0=      | previous window                                                           |
|                         | =C-9=      | next window                                                               |
|                         | =F2=       | split window vertically                                                   |
|                         | =F3=       | split window horizontally                                                 |
|                         | =F4=       | delete current window (not the buffer)                                    |
|                         | =F5=       | only keep the current window and delete all others                        |
|                         | =F7=       | switch arrangement of two windows horizontally/vertically                 |
|                         | =F9=       | split window and show last buffer, another press hides that window again  |
|                         | =C-left=   | shrink window                                                             |
|                         | =C-right=  | enlarge window                                                            |
|                         | =C-up=     | shrink window horizontally                                                |
|                         | =C-down=   | enlarge window horizontally                                               |
|                         | =M-up=     | move buffer to window above                                               |
|                         | =M-down=   | move buffer to window below                                               |
|                         | =M-left=   | move buffer to left window                                                |
|                         | =M-right=  | move buffer to right window                                               |
|                         | =,.=       | Delete the current frame                                                  |
| *Movement / Selections* | =M-i=      | move to next expression                                                   |
|                         | =M-o=      | move to previous expression                                               |
|                         | =C-{=      | select previous "thing"                                                   |
|                         | =C-}=      | select next "thing"                                                       |
|                         | =C-\=      | select/exchange previous "thing"                                          |
|                         | =C-]=      | select/exchange next "thing"                                              |
|                         | =C-3=      | go to last automatically saved position                                   |
|                         | =C-4=      | go to next automatically saved  position                                  |
|                         | =M-2=      | show all symbols like the one cursor is located at                        |
|                         | =M-3=      | previous symbol like the one the cursor is on                             |
|                         | =M-4=      | next symbol like the one the cursor is on                                 |
|                         | =i9=       | toggle automatic identation                                               |
|                         | =C-8=      | select symbol under cursor, pressing again will smartly expand the region |
|                         | =M-8=      | narrow the selection again                                                |
|                         | =C->=      | add cursor downwards (try to get next occurrence if sth. is marked)       |
|                         | =C-<=      | add cursor upwards (try to get previous occurrence if sth. is marked)     |
|                         | =C-f9=     | move line/selection down                                                  |
|                         | =C-f10=    | move line/selection up                                                    |
| *Elisp Evaluation*      | =90=       | evaluate list (with visual feedback)                                      |
|                         | =C-c C-c=  | "                                                                         |
|                         | =C-c C-e=  | evaluate s-expression (with visual feedback)                              |
| *Completion*            | =C-7=      | Trigger auto-completion explicitly (with fuzzy matching)                  |
| *Formatting*            | =C-c w=    | cleanup whitespace                                                        |
|                         | =C-c j=    | join two lines (also mapped to M-^ by default)                            |
|                         | =ac=       | align expressions, e.g. align all === in 3 lines with assignments         |
| *Search / Replace*      | =34=       | find definitions (functions, headings etc.) in current file               |
|                         | =gt=       | google selection / word under cursor (in web browser)                     |
|                         | =gs=       | google (prompt and search in web browser)                                 |
|                         | =vr=       | search/replace with visual regexp                                         |
|                         | =lo=       | locate (helm)                                                             |
|                         | =34=       | imenu (helm)                                                              |
|                         | =M-9=      | occur (helm)                                                              |
|                         | =C-;=      | edit occurences of current word on the fly, press again to exit           |
| *Rings*                 | =M-7=      | show kill ring (helm)                                                     |
|                         | =C-5=      | show all mark rings (helm)                                                |
| *Project related*       | =fr=       | find files in current project                                             |
|                         | =rg=       | grep through current project                                              |
|                         | =ok=       | show occurrences of a string in current project                           |
|                         | =aw=       | ack through current project                                               |
|                         | =ag=       | ag through current project                                                |
|                         | =C-c g=    | magit status - manual: http://magit.github.io/magit/                      |
|                         | =C-c l=    | magit log                                                                 |
| *Tags*                  | =M-.=      | find tag                                                                  |
|                         | =M-5=      | select etag (helm)                                                        |
|                         | =M-6=      | find tag in other window                                                  |
| *Code/Spell checking*   | =cf=       | toggle code checking (flycheck)                                           |
|                         | =C-c f=    | toggle spell checking (flyspell)                                          |
|                         | =C-c d=    | change dictionary                                                         |
| *Shell*                 | =C-c s=    | open emacs shell                                                          |
| *PHP*                   | =vd=       | insert var_dump around selection                                          |
|                         | =vb=       | insert var_dump + die around selection                                    |

** Contributions

I'm using *outline-mode* to keep =emacs.el= organized. Top level headings have one star:

#+BEGIN_SRC emacs-lisp
  ;; * Top Level Heading
#+END_SRC

And so on:

#+BEGIN_SRC emacs-lisp
  ;; ** Second Level Heading
#+END_SRC

These commands are defined:

|  combo    | description
| ----------|-------------------------------------------------
| =C-c C-r= | Cycle through the states of the outline buffer
| =C-c C-q= | Hide everything but the top-level headings
| =C-t C-a= | Show (expand) everything

So... that's what should make it easier to keep an overview. If you want to help me out improving the config, fork the repo, create a new branch and open up a Pull Request so we can discuss the merge.

Of course you can also just [[https://github.com/steckerhalter/steckemacs/issues][report issues]] :)

* COMMENT Code
** load-path

#+BEGIN_SRC emacs-lisp
  ;; http://emacswiki.org/emacs/LoadPath
  (let ((default-directory "~/.emacs.d/elisp/"))
    (unless (file-exists-p default-directory)
      (make-directory default-directory))
    (setq load-path
          (append
           (let ((load-path (copy-sequence load-path))) ;; Shadow
             (append
              (copy-sequence (normal-top-level-add-to-load-path '(".")))
              (normal-top-level-add-subdirs-to-load-path)))
           load-path)))
#+END_SRC

** el-get

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")
  (setq el-get-install-skip-emacswiki-recipes t)
  
  (unless (require 'el-get nil 'noerror)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
      (goto-char (point-max))
      (eval-print-last-sexp)))
  
  (setq el-get-sources
        '(
          (:name php-documentor
                 :type http
                 :url "https://raw.github.com/wenbinye/dot-emacs/master/site-lisp/contrib/php-documentor.el")
          (:name php-align
                 :type http
                 :url "https://raw.github.com/tetsujin/emacs-php-align/master/php-align.el")
          (:name mysql
                 :type http
                 :url "http://www.emacswiki.org/emacs/download/mysql.el")
          (:name sql-completion
                 :type http
                 :url "http://www.emacswiki.org/emacs/download/sql-completion.el")
          (:name rcirc-color
                 :type http
                 :url "http://www.emacswiki.org/emacs/download/rcirc-color.el")
          (:name ac-php-doc
                 :type http
                 :url "https://raw.github.com/steckerhalter/ac-php-doc/master/ac-php-doc.el")
          (:name eval-sexp-fu
                 :type http
                 :url "http://www.emacswiki.org/emacs/download/eval-sexp-fu.el")
          (:name magit-inotify
                 :type http
                 :url "https://raw.github.com/magit/magit/master/contrib/magit-inotify.el")
          (:name outline-magic
                 :type http
                 :url "https://raw.github.com/tj64/outline-magic/master/outline-magic.el")
          ))
  
  (setq my-el-get-packages
        (append
         '()
         (mapcar 'el-get-source-name el-get-sources)))
  
  (el-get 'sync my-el-get-packages)
#+END_SRC

** package.el

#+BEGIN_SRC emacs-lisp
  (package-initialize)
  
  (setq package-archives '((     "elpa" . "http://elpa.gnu.org/packages/")
                           ("marmalade" . "http://marmalade-repo.org/packages/")
                           (    "melpa" . "http://melpa.milkbox.net/packages/")))
  
  (setq my-packages

        '(ack-and-a-half
          ac-nrepl
          ac-slime
          ag
          auto-complete
          auto-save-buffers-enhanced
          back-button
          buffer-move
          creole-mode
          clojure-mode
          csv-mode
          dired+
          erc-hl-nicks
          expand-region
          fic-ext-mode
          flex-isearch
          flycheck
          geben
          gist
          git-gutter-fringe+
          google-this
          grandshell-theme
          grizzl
          haskell-mode
          hide-comnt
          highlight
          helm
          helm-descbinds
          helm-c-yasnippet
          helm-gtags
          helm-git
          helm-projectile
          highlight-symbol
          iedit
          isearch+
          jinja2-mode
          js2-mode
          json-mode
          key-chord
          magit
          markdown-mode+
          melpa-upstream-visit
          mmm-mode
          mo-git-blame
          move-text
          multi-web-mode
          multiple-cursors
          nav
          nrepl
          nrepl-eval-sexp-fu
          org
          org-reveal
          paredit
          php-eldoc
          php-mode
          popup
          pos-tip
          rainbow-mode
          robe
          restclient
          slime-js
          smart-mode-line
          smartparens
          visual-regexp
          volatile-highlights
          yaml-mode
          yari
          yasnippet)
        )
  
  (unless (condition-case nil
              (delete-process
               (make-network-process
                :name "stk/check-internet"
                :host "elpa.gnu.org"
                :service 80))
            (error t))
    (package-refresh-contents)
    (mapcar 'package-install
            (loop for p in my-packages
                  unless (package-installed-p p) collect p)))
#+END_SRC

** key bindings

*** my keymap to override problematic bindings

#+BEGIN_SRC emacs-lisp
  (defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")
#+END_SRC

*** key-chord
#+BEGIN_SRC emacs-lisp
  (key-chord-mode 1)
  (setq key-chord-two-keys-delay 0.03)
#+END_SRC

*** general

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c X") (lambda () (interactive) (shell-command "pkill emacs")))
  (global-set-key (kbd "C-c s") 'shell)
  (key-chord-define-global "cd" (lambda () (interactive) (dired (file-name-directory (or load-file-name buffer-file-name)))))
  (key-chord-define-global "sb" 'speedbar)
  (global-set-key (kbd "C-S-l") 'package-list-packages-no-fetch)
  (global-set-key (kbd "C-c d")  'ispell-change-dictionary)
  (key-chord-define-global "cg" 'customize-group)
  (global-set-key (kbd "C-h C-f") 'find-function-at-point)
  (global-set-key (kbd "C-h C-v") 'find-variable-at-point)
  (global-set-key (kbd "C-c C-w") 'browse-url-at-point)
#+END_SRC

*** appearance

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c m") 'menu-bar-mode)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (key-chord-define-global "ln" 'linum-mode)
#+END_SRC

*** buffer / file

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c r")  'revert-buffer)
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)   ;use ido to switch buffers
  (global-set-key (kbd "<f6>") (lambda () (interactive) (kill-buffer (buffer-name)))) ;kill current buffer
  (global-set-key (kbd "<f8>") (lambda () (interactive) (switch-to-buffer nil))) ;"other" buffer
  (key-chord-define-global "jn" (lambda () (interactive) (switch-to-buffer nil))) ;"other" buffer
  (key-chord-define-global "fv" (lambda () (interactive) (kill-buffer (buffer-name)))) ;kill current buff
  (global-set-key (kbd "<M-up>")    'buf-move-up)
  (global-set-key (kbd "<M-down>")  'buf-move-down)
  (global-set-key (kbd "<M-left>")  'buf-move-left)
  (global-set-key (kbd "<M-right>") 'buf-move-right)
  (key-chord-define-global "eb" 'eval-buffer)
  (key-chord-define-global "sv" 'save-buffer)
  (key-chord-define-global "sc" (lambda () (interactive)(switch-to-buffer "*scratch*")))
#+END_SRC

*** window / frame

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-0") (lambda () (interactive) (select-window (previous-window)))) ;select prev window
  (global-set-key (kbd "C-9") (lambda () (interactive) (select-window (next-window))))     ;select next window
  (key-chord-define-global "ef" (lambda () (interactive) (select-window (previous-window))))
  (key-chord-define-global "ji" (lambda () (interactive) (select-window (next-window))))
  (global-set-key (kbd "<f2>") 'split-window-vertically)
  (global-set-key (kbd "<f3>") 'split-window-horizontally)
  (global-set-key (kbd "<f4>") 'delete-window)
  (global-set-key (kbd "<f5>") 'delete-other-windows)
  (global-set-key (kbd "<C-left>") 'shrink-window)
  (global-set-key (kbd "<C-right>") 'enlarge-window)
  (global-set-key (kbd "<C-up>") 'shrink-window-horizontally)
  (global-set-key (kbd "<C-down>") 'enlarge-window-horizontally)
  (key-chord-define-global "jo" 'delete-window)
  (key-chord-define-global "fw" 'delete-other-windows)
  (key-chord-define-global "sf" 'split-window-horizontally)
  (key-chord-define-global "jl" 'split-window-vertically)
  (key-chord-define-global ",." 'delete-frame)
#+END_SRC

*** movement / selections

#+BEGIN_SRC emacs-lisp
  (define-key key-translation-map (kbd "C-t") (kbd "C-p"))
  (key-chord-define-global "sd" 'move-beginning-of-line)
  (key-chord-define-global "kl" 'move-end-of-line)
  (key-chord-define-global "wf" 'forward-word)
  (key-chord-define-global "aj" (lambda ()  (interactive) (end-of-line) (set-mark (line-beginning-position))))
  (key-chord-define-global "wa" 'backward-word)
  (key-chord-define-global "i9" 'electric-indent-mode)
  
  ;; editing
  (global-set-key (kbd "M-W" ) 'delete-region)  ;delete region (but don't put it into kill ring)
  (key-chord-define-global "wd" 'kill-word)
  (key-chord-define-global "wr" 'kill-whole-line)
  (global-set-key (kbd "C-c j") 'join-line)
  (global-set-key (kbd "<C-backspace>") (lambda ()
                                        (interactive)
                                        (let ((beg (point)))
                                          (backward-word)
                                        (delete-region beg (point)))))
#+END_SRC

*** formatting

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c w") 'whitespace-cleanup)     ;cleanup whitespaces
  (global-set-key (kbd "C-c i") (lambda () (interactive) ;indent the whole the buffer
                            (indent-region (point-min) (point-max))))
  (key-chord-define-global "ac" 'align-current)
  (global-set-key (kbd "C-c q") 'auto-fill-mode) ;toggles word wrap
#+END_SRC

*** searching / grepping

#+BEGIN_SRC emacs-lisp
  (key-chord-define-global "vg" 'vc-git-grep)
  (key-chord-define-global "fg" 'grep-find)
  (global-set-key (kbd "C-c o") 'occur) ;list matching regexp
  (global-set-key (kbd "M-6") 'find-tag-other-window)
#+END_SRC

** general options

#+BEGIN_SRC emacs-lisp
  ;; load the secrets if available
  (when (file-readable-p "~/.secrets.el") (load "~/.secrets.el"))
  
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  
  (setq
   inhibit-startup-message t
   backup-directory-alist `((".*" . ,temporary-file-directory)) ;don't clutter my fs and put backups into tmp
   auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
   require-final-newline t            ;auto add newline at the end of file
   column-number-mode t               ;show the column number
   default-major-mode 'text-mode      ;use text mode per default
   truncate-partial-width-windows nil ;make side by side buffers break the lines
   mouse-yank-at-point t              ;middle click with the mouse yanks at point
   history-length 250                 ;default is 30
   locale-coding-system 'utf-8        ;utf-8 is default
   confirm-nonexistent-file-or-buffer nil
   vc-follow-symlinks t
   recentf-max-saved-items 5000
   )
  
  (setq-default
   tab-width 4
   indent-tabs-mode nil                ;use spaces instead of tabs
   c-basic-offset 4
   c-auto-hungry-state 1
   )
  
  (global-auto-revert-mode 1)          ;auto revert buffers when changed on disk
  (show-paren-mode t)                  ;visualize()
  (iswitchb-mode t)                    ;use advanced tab switching
  (blink-cursor-mode -1)
  (tool-bar-mode -1)                   ;disable the awful toolbar
  (menu-bar-mode -1)                   ;no menu
  (scroll-bar-mode -1)
  (savehist-mode 1)                    ;save minibuffer history
  
  ;(global-hl-line-mode 0)
  
  ;(defun yes-or-no-p (&rest ignored) t)    ;turn off most confirmations
  (defalias 'yes-or-no-p 'y-or-n-p)
  
  ; http://www.masteringemacs.org/articles/2010/11/14/disabling-prompts-emacs/
  (setq kill-buffer-query-functions
    (remq 'process-kill-buffer-query-function
           kill-buffer-query-functions))
  
  (put 'dired-find-alternate-file 'disabled nil) ;don't always open new buffers in dired
  
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(ansi-color-names-vector [("black" . "#8a8888") ("#EF3460" . "#F25A7D") ("#BDEF34" . "#DCF692") ("#EFC334" . "#F6DF92") ("#34BDEF" . "#92AAF6") ("#B300FF" . "#DF92F6") ("#3DD8FF" . "#5AF2CE") ("#FFFFFF" . "#FFFFFF")])
   '(ecb-options-version "2.40")
   '(send-mail-function (quote sendmail-send-it)))
   ;; '(session-use-package t nil (session)))
#+END_SRC

*** system specific settings

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'gnu/linux)
    (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t) ;activate coloring
    (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)   ;for the shell
    (setq x-select-enable-clipboard t)                           ;enable copy/paste from emacs to other apps
    )
#+END_SRC

** theme, faces, frame

#+BEGIN_SRC emacs-lisp
  (load-theme 'grandshell t)
  
  (custom-set-faces
   '(default ((t (:background "black" :foreground "#babdb6" :family "Bitstream Vera Sans Mono" :height 89)))))
  
  ;; more useful frame title, that show either a file or a
  ;; buffer name (if the buffer isn't visiting a file)
  (setq frame-title-format
        '("" invocation-name " "(:eval (if (buffer-file-name)
                                        (abbreviate-file-name (buffer-file-name))
                                      "%b"))))
#+END_SRC

** custom functions

#+BEGIN_SRC emacs-lisp
  ;; copy filename of current buffer to kill ring
  (defun show-file-name ()
    "Show the full path file name in the minibuffer."
    (interactive)
    (message (buffer-file-name))
    (kill-new (file-truename buffer-file-name))
    )
  (global-set-key (kbd "C-c n") 'show-file-name)
  
  (defun my/split-window()
    "Split the window to see the most recent buffer in the other window.
  Call a second time to restore the original window configuration."
    (interactive)
    (if (eq last-command 'my/split-window)
        (progn
          (jump-to-register :my/split-window)
          (setq this-command 'my/unsplit-window))
      (window-configuration-to-register :my/split-window)
      (switch-to-buffer-other-window nil)))
  
  (global-set-key (kbd "<f9>") 'my/split-window)
  
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
           (next-win-buffer (window-buffer (next-window)))
           (this-win-edges (window-edges (selected-window)))
           (next-win-edges (window-edges (next-window)))
           (this-win-2nd (not (and (<= (car this-win-edges)
                       (car next-win-edges))
                       (<= (cadr this-win-edges)
                       (cadr next-win-edges)))))
           (splitter
            (if (= (car this-win-edges)
               (car (window-edges (next-window))))
            'split-window-horizontally
          'split-window-vertically)))
      (delete-other-windows)
      (let ((first-win (selected-window)))
        (funcall splitter)
        (if this-win-2nd (other-window 1))
        (set-window-buffer (selected-window) this-win-buffer)
        (set-window-buffer (next-window) next-win-buffer)
        (select-window first-win)
        (if this-win-2nd (other-window 1))))))
  
  (global-set-key (kbd "<f7>") 'toggle-window-split)
  
  (defvar stk/terminal '("gnome-terminal" . "--working-directory=" )
    "Terminal executable and after the dot the working directory option for the terminal"
    )
  
  (defun stk/open-terminal (project-root-p)
    "Open the terminal emulator either from the project root or
    from the location of the current file."
    (start-process "*stk/terminal*" nil (car stk/terminal)
     (concat (cdr stk/terminal)
             (file-truename
              (if project-root-p (projectile-project-root)
                (file-name-directory (or dired-directory load-file-name buffer-file-name)))
      ))
     )
    )
  
  (global-set-key (kbd "C-c t") (lambda () (interactive) (stk/open-terminal nil)))
  (global-set-key (kbd "C-c T") (lambda () (interactive) (stk/open-terminal t)))
  
  (when (executable-find "autojump")
    (defun ido-autojump (&optional query)
      "Use autojump to open a directory with dired"
      (interactive)
      (unless query (setq query (read-from-minibuffer "Autojump query? ")))
      (let ((dir
             (let ((results
                    (split-string
                     (replace-regexp-in-string
                      ".*__.__" ""
                      (replace-regexp-in-string
                       "^'\\|'\n" ""
                       (shell-command-to-string (concat "autojump --bash --completion " query))))
                     "\n" t)))
               (if (> (length results) 1)
                   (ido-completing-read "Dired: " results nil t)
                 (car results)))
             ))
        (if dir
            (if (file-readable-p dir)
                (dired dir)
              (message "Directory %s doesn't exist" dir))
          (message "No directory found")
          )
        ))
  
    (global-set-key (kbd "C-6") 'ido-autojump)
  
    (defun autojump-add-directory ()
      "Adds the directory of the current buffer/file to the autojump database"
      (start-process "*autojump*" nil "autojump" "--add" (file-name-directory (buffer-file-name)))
      )
  
    (add-hook 'find-file-hook 'autojump-add-directory)
  
    )
#+END_SRC

** advices

#+BEGIN_SRC emacs-lisp
  ;; slick-copy: make copy-past a bit more intelligent
  ;; from: http://www.emacswiki.org/emacs/SlickCopy
  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single
  line instead."
    (interactive
      (if mark-active (list (region-beginning) (region-end))
        (message "Copied line")
        (list (line-beginning-position)
                 (line-beginning-position 2)))))
  
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single
  line instead."
    (interactive
      (if mark-active (list (region-beginning) (region-end))
        (list (line-beginning-position)
          (line-beginning-position 2)))))
  
  ;; auto-close shell completion buffer from http://snarfed.org/automatically_close_completions_in_emacs_shell_comint_mode
  (defun comint-close-completions ()
    "Close the comint completions buffer.
  Used in advice to various comint functions to automatically close
  the completions buffer as soon as I'm done with it. Based on
  Dmitriy Igrishin's patched version of comint.el."
    (if comint-dynamic-list-completions-config
        (progn
          (set-window-configuration comint-dynamic-list-completions-config)
          (setq comint-dynamic-list-completions-config nil))))
  (defadvice comint-send-input (after close-completions activate)
    (comint-close-completions))
  (defadvice comint-dynamic-complete-as-filename (after close-completions activate)
    (if ad-return-value (comint-close-completions)))
  (defadvice comint-dynamic-simple-complete (after close-completions activate)
    (if (member ad-return-value '('sole 'shortest 'partial))
        (comint-close-completions)))
  (defadvice comint-dynamic-list-completions (after close-completions activate)
      (comint-close-completions)
      (if (not unread-command-events)
          ;; comint's "Type space to flush" swallows space. put it back in.
          (setq unread-command-events (listify-key-sequence " "))))
  
  ;; bury *scratch* buffer instead of kill it
  (defadvice kill-buffer (around kill-buffer-around-advice activate)
    (let ((buffer-to-kill (ad-get-arg 0)))
      (if (equal buffer-to-kill "*scratch*")
          (bury-buffer)
        ad-do-it)))
#+END_SRC

** modes

*** ag

#+BEGIN_SRC emacs-lisp
  (key-chord-define-global "ag" 'ag-project)
#+END_SRC

*** auctex-mode

#+BEGIN_SRC emacs-lisp
  (setq TeX-PDF-mode t)
  (setq TeX-parse-self t)
  (setq TeX-auto-save t)
  (setq TeX-save-query nil)
  
  (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  (add-hook 'TeX-mode-hook
            '(lambda ()
               (define-key TeX-mode-map (kbd "<C-f8>")
                 (lambda ()
                   (interactive)
                   (TeX-command-menu "LaTeX")))
               )
            )
#+END_SRC

*** auto-complete

#+BEGIN_SRC emacs-lisp
  (require 'auto-complete-config)
  (ac-config-default)
  (setq ac-auto-show-menu 0.5)
  (setq ac-quick-help-height 50)
  (setq ac-quick-help-delay 1)
  (setq ac-use-fuzzy t)
  (setq ac-disable-faces nil)
  (setq ac-quick-help-prefer-x nil)
  (global-set-key (kbd "C-7") 'auto-complete)
  (require 'pos-tip)
  ;; from http://emacswiki.org/emacs/AutoComplete
  (defun stk/ac-show-help ()
    "show docs for symbol at point or at beginning of list if not on a symbol"
    (interactive)
    (let ((s (save-excursion
               (or (symbol-at-point)
                   (progn (backward-up-list)
                          (forward-char)
                          (symbol-at-point))))))
      (let ((doc-string (ac-symbol-documentation s)))
        (if doc-string
            (if ac-quick-help-prefer-x
                (pos-tip-show doc-string 'popup-tip-face (point) nil -1)
              (popup-tip doc-string :point (point)))
          (message "No documentation for %s" s)
          ))))
  (define-key lisp-mode-shared-map (kbd "<f1>") 'stk/ac-show-help)
  (define-key lisp-mode-shared-map (kbd "C-c C-h") 'stk/ac-show-help)
#+END_SRC

*** auto-save-buffers-enhanced

#+BEGIN_SRC emacs-lisp
  (require 'auto-save-buffers-enhanced)
  (auto-save-buffers-enhanced-include-only-checkout-path t)
  (auto-save-buffers-enhanced t)
  (global-set-key (kbd "C-x a s") 'auto-save-buffers-enhanced-toggle-activity)
#+END_SRC

*** back-button

#+BEGIN_SRC emacs-lisp
  (require 'back-button)
  (global-set-key (kbd "C-3") 'back-button-local-backward)
  (global-set-key (kbd "C-4") 'back-button-local-forward)
  (back-button-mode 1)
#+END_SRC

*** conf-mode

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.tks\\'" . conf-mode))
  (add-to-list 'ac-modes 'conf-mode)
#+END_SRC

*** deft

#+BEGIN_SRC emacs-lisp
  (setq
   deft-extension "org"
   deft-directory "~/org/deft"
   deft-text-mode 'org-mode
   deft-use-filename-as-title t
   )
  (global-set-key (kbd "C-c c") 'deft)
#+END_SRC

*** dired+

#+BEGIN_SRC emacs-lisp
  (toggle-diredp-find-file-reuse-dir 1)
#+END_SRC

*** eval-sexp-fu

#+BEGIN_SRC emacs-lisp
  (when (and (>= emacs-major-version 24) (>= emacs-minor-version 3))
    (require 'eval-sexp-fu)
    (setq eval-sexp-fu-flash-duration 0.4)
    (turn-on-eval-sexp-fu-flash-mode)
    (key-chord-define lisp-interaction-mode-map "90" 'eval-sexp-fu-eval-sexp-inner-list)
    (key-chord-define emacs-lisp-mode-map "90" 'eval-sexp-fu-eval-sexp-inner-list)
    (define-key lisp-interaction-mode-map (kbd "C-c C-c") 'eval-sexp-fu-eval-sexp-inner-list)
    (define-key lisp-interaction-mode-map (kbd "C-c C-e") 'eval-sexp-fu-eval-sexp-inner-sexp)
    (define-key emacs-lisp-mode-map (kbd "C-c C-c") 'eval-sexp-fu-eval-sexp-inner-list)
    (define-key emacs-lisp-mode-map (kbd "C-c C-e") 'eval-sexp-fu-eval-sexp-inner-sexp)
  )
#+END_SRC

*** ecb

#+BEGIN_SRC emacs-lisp
  (setq
   ecb-primary-secondary-mouse-buttons (quote mouse-1--mouse-2)
   ecb-tip-of-the-day nil
   )
  (global-set-key (kbd "C-c e") (lambda () (interactive)
                                  (if (not (fboundp 'ecb-toggle-ecb-windows))
                                      (ecb-activate)
                                    (ecb-toggle-ecb-windows))
                                  ))
#+END_SRC

*** erc mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'erc-mode-hook (lambda ()
                             (erc-truncate-mode t)
                             (erc-fill-disable)
                             (set (make-local-variable 'scroll-conservatively) 1000)
                             )
            )
  (setq erc-timestamp-format "%H:%M "
        erc-fill-prefix "      "
        erc-insert-timestamp-function 'erc-insert-timestamp-left)
  (setq erc-interpret-mirc-color t)
  (setq erc-kill-buffer-on-part t)
  (setq erc-kill-queries-on-quit t)
  (setq erc-kill-server-buffer-on-quit t)
  (setq erc-server-send-ping-interval 45)
  (setq erc-server-send-ping-timeout 180)
  (setq erc-server-reconnect-timeout 60)
  (erc-track-mode t)
  (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                  "324" "329" "332" "333" "353" "477"))
  (setq erc-hide-list '("JOIN" "PART" "QUIT" "NICK"))
  (global-set-key (kbd "C-c E")
                  (lambda ()
                    (interactive)
                    (erc-tls
                     :server erc-server
                     :port erc-port
                     :nick erc-nick
                     :full-name erc-user-full-name
                     :password erc-password
                     )))
  
  ;; ------ template for .secrets.el
  ;; (setq erc-prompt-for-nickserv-password nil)
  ;; (setq erc-server "hostname"
  ;;       erc-port 7000
  ;;       erc-nick "user"
  ;;       erc-user-full-name "user"
  ;;       erc-email-userid "user"
  ;;       erc-password "user:pw"
  ;;       )
#+END_SRC

*** expand-region

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-8") 'er/expand-region)
  (global-set-key (kbd "M-8") 'er/contract-region)
#+END_SRC

*** fic-ext-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'fic-ext-mode) ;; highlight TODO/FIXME/...
#+END_SRC

*** flex-isearch

#+BEGIN_SRC emacs-lisp
  (setq flex-isearch-auto 'on-failed)
  (flex-isearch-mode 1)
#+END_SRC

*** flycheck-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'php-mode-hook 'flycheck-mode)
  (add-hook 'sh-mode-hook 'flycheck-mode)
  (add-hook 'json-mode-hook 'flycheck-mode)
  (add-hook 'nxml-mode-hook 'flycheck-mode)
  (key-chord-define-global "fc" 'flycheck-mode)
#+END_SRC

*** flyspell-mode

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c f")  'flyspell-mode)
#+END_SRC

*** fringe

#+BEGIN_SRC emacs-lisp
  (setq indicate-buffer-boundaries 'left)
#+END_SRC

*** git-gutter-fringe+

#+BEGIN_SRC emacs-lisp
  (global-git-gutter+-mode)
#+END_SRC

*** google-this

#+BEGIN_SRC emacs-lisp
  (google-this-mode 1)
  (key-chord-define-global "gt" 'google-this)
  (key-chord-define-global "gs" 'google-search)
#+END_SRC

*** haskell-mode

#+BEGIN_SRC emacs-lisp
  (require 'haskell-mode)
  (setq haskell-indent-thenelse 3)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
#+END_SRC

*** helm

#+BEGIN_SRC emacs-lisp
  (require 'helm-config)
  (setq enable-recursive-minibuffers t)
  (helm-mode 1)
  (helm-gtags-mode 1)
  (setq helm-idle-delay 0.1)
  (setq helm-input-idle-delay 0.1)
  (setq helm-buffer-max-length 50)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (define-key my-keys-minor-mode-map (kbd "<C-return>") 'helm-mini)
  (global-set-key (kbd "<C-f7>") 'helm-mini) ; for the terminal
  (global-set-key (kbd "<C-S-iso-lefttab>") 'helm-for-files)
  (global-set-key (kbd "C-x f") 'helm-find-files)
  (global-set-key (kbd "M-5") 'helm-etags-select)
  (global-set-key (kbd "M-7") 'helm-show-kill-ring)
  (global-set-key (kbd "C-5") 'helm-all-mark-rings)
  (global-set-key (kbd "M-9") 'helm-occur)
  (global-set-key (kbd "M--") 'helm-resume)
  (global-set-key (kbd "C-S-h") 'helm-descbinds)
  (global-set-key (kbd "C-c h") 'helm-projectile)
  (key-chord-define-global "fw" 'helm-find-files)
  (key-chord-define-global "hg" (lambda () (interactive) (let ((current-prefix-arg t)) (helm-do-grep))))
  (key-chord-define-global "lo" 'helm-locate)
  (key-chord-define-global "34" 'helm-imenu)
  
  (require 'helm-git)
  (global-set-key (kbd "M-0") 'helm-git-find-files)
#+END_SRC

*** hide-comnt

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<C-f8>") 'hide/show-comments-toggle)
#+END_SRC

*** highlight-symbol

#+BEGIN_SRC emacs-lisp
  (setq highlight-symbol-on-navigation-p t)
  (setq highlight-symbol-idle-delay 0.2)
  (global-set-key (kbd "M-2") 'highlight-symbol-occur)
  (global-set-key (kbd "M-3") (lambda () (interactive) (highlight-symbol-jump -1)))
  (global-set-key (kbd "M-4") (lambda () (interactive) (highlight-symbol-jump 1)))
  (add-hook 'prog-mode-hook 'highlight-symbol-mode)
#+END_SRC

*** html-mode

#+BEGIN_SRC emacs-lisp
  (add-to-list 'ac-modes 'html-mode)
#+END_SRC

*** ido-mode

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t
        ido-auto-merge-work-directories-length -1
        ido-create-new-buffer 'always
        ido-everywhere t
        ido-default-buffer-method 'selected-window
        ido-max-prospects 32
        )
  (ido-mode 1)
#+END_SRC

*** iedit

#+BEGIN_SRC emacs-lisp
  (require 'iedit)
  (setq iedit-unmatched-lines-invisible-default t)
#+END_SRC

*** isearch+

#+BEGIN_SRC emacs-lisp
  (eval-after-load "isearch" '(require 'isearch+))
#+END_SRC

*** jinja2-mode for twig

#+BEGIN_SRC emacs-lisp
  (require 'jinja2-mode)
  (add-to-list 'auto-mode-alist '("\\.twig$" . jinja2-mode))
#+END_SRC

*** js2-mode

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
  (add-hook 'js2-mode-hook
            (lambda ()
              (when (fboundp 'slime-js-minor-mode) (slime-js-minor-mode 1))
              (local-set-key (kbd "C-c C-v") 'slime-eval-region)
              (local-set-key (kbd "C-c b") 'slime-eval-buffer)
              (local-set-key (kbd "C-x C-e") (lambda () (interactive) (slime-eval-region (line-beginning-position) (line-end-position))))
              (local-set-key (kbd "C-c h") (lambda () (interactive) (mark-paragraph) (slime-eval-region (region-beginning) (region-end))))
              ))
#+END_SRC

*** json-mode

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
#+END_SRC

*** magit

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c g") 'magit-status)
  (global-set-key (kbd "C-c l") 'magit-log)
  (key-chord-define-global "bm" 'magit-blame-mode)
  
  (setq magit-commit-all-when-nothing-staged t)
  (add-hook 'magit-status-mode-hook 'magit-inotify-mode)
#+END_SRC

*** markdown

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+END_SRC

*** melpa-upstream-visit

#+BEGIN_SRC emacs-lisp
  (require 'melpa-upstream-visit)
#+END_SRC

*** move-text

#+BEGIN_SRC emacs-lisp
  (require 'move-text)
  (global-set-key (kbd "<C-f10>") 'move-text-up)
  (global-set-key (kbd "<C-f9>") 'move-text-down)
#+END_SRC

*** mu4e

#+BEGIN_SRC emacs-lisp
  (when (file-exists-p "/usr/local/share/emacs/site-lisp/mu4e")
    (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
    (autoload 'mu4e "mu4e" "Mail client based on mu (maildir-utils)." t)
    ;; enable inline images
    (setq mu4e-view-show-images t)
    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
    (setq mu4e-html2text-command "html2text -utf8 -width 72")
    (setq mu4e-update-interval 60)
    (setq mu4e-auto-retrieve-keys t)
    (setq mu4e-headers-leave-behavior 'apply)
    (setq mu4e-headers-visible-lines 20)
  
    (add-hook 'mu4e-headers-mode-hook (lambda () (local-set-key (kbd "X") (lambda () (interactive) (mu4e-mark-execute-all t)))))
    (add-hook 'mu4e-view-mode-hook (lambda () (local-set-key (kbd "X") (lambda () (interactive) (mu4e-mark-execute-all t)))))
  
    (defun mu4e-headers-mark-all-unread-read ()
      (interactive)
      (mu4e~headers-mark-for-each-if
       (cons 'read nil)
       (lambda (msg param)
         (memq 'unread (mu4e-msg-field msg :flags)))))
  
    (defun mu4e-flag-all-read ()
      (interactive)
      (mu4e-headers-mark-all-unread-read)
      (mu4e-mark-execute-all t))
  
    (setq message-kill-buffer-on-exit t)
  
    (key-chord-define-global "nm" 'mu4e)
    )
#+END_SRC

*** multiple-cursors

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-*") 'mc/mark-all-like-this)
#+END_SRC

*** mutt, load mail-mode

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("/mutt" . mail-mode))
  (add-hook 'mail-mode-hook (lambda ()
                              (flyspell-mode 1)
                              ))
#+END_SRC

*** nrepl

#+BEGIN_SRC emacs-lisp
  (add-hook 'nrepl-interaction-mode-hook 'nrepl-turn-on-eldoc-mode)
  (setq nrepl-popup-stacktraces nil)
  (setq nrepl-popup-stacktraces-in-repl nil)
  (setq nrepl-hide-special-buffers t)
  
  ;; font-locking for the nrepl
  ;; https://github.com/kylefeng/.emacs.d/commit/45f2bece4652f4345ec08e68e8ef0608b81c5db7
  (add-hook 'nrepl-mode-hook
            (lambda ()
              (font-lock-mode nil)
              (clojure-mode-font-lock-setup)
              (font-lock-mode t)))
  
  (require 'ac-nrepl)
  (add-hook 'nrepl-mode-hook 'ac-nrepl-setup)
  (add-hook 'nrepl-interaction-mode-hook 'ac-nrepl-setup)
  (add-to-list 'ac-modes 'nrepl-mode)
  (define-key nrepl-interaction-mode-map (kbd "C-c C-d") 'ac-nrepl-popup-doc)
#+END_SRC

*** nrepl-eval-sexp-fu

#+BEGIN_SRC emacs-lisp
  (require 'nrepl-eval-sexp-fu)
  (setq nrepl-eval-sexp-fu-flash-duration 0.4)
#+END_SRC

*** org-mode

#+BEGIN_SRC emacs-lisp
  ;; if todo.org exists, startup emacs with the org todo (list )
  (require 'org)
  (let ((todo "~/org/todo.org"))
    (when (file-readable-p todo)
      (setq org-agenda-files '("~/org/todo.org" "~/org/deft/"))
      (setq initial-buffer-choice (lambda ()
                                    (org-agenda nil "n")
                                    (delete-other-windows)
                                    (current-buffer)
                                    ))
      ))
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (setq org-startup-indented t)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
  (setq org-startup-folded 'nofold)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-default-notes-file (concat org-directory "/todo.org"))
  (global-set-key (kbd "C-c C-9") 'org-capture)
  
  ;; minted
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
  
  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  
  (setq
   appt-display-mode-line t     ; show in the modeline
   appt-display-format 'window)
  (appt-activate 1)              ; activate appt (appointment notification)
  
  (org-agenda-to-appt)           ; add appointments on startup
  
  ;; add new appointments when saving the org buffer, use 'refresh argument to do it properly
  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook '(lambda () (org-agenda-to-appt 'refresh)) nil 'make-it-local)
              (local-set-key "\C-cd" 'org-toodledo-mark-task-deleted)
              (local-set-key "\C-cs" 'org-toodledo-sync)
              ))
  (setq appt-disp-window-function '(lambda (min-to-app new-time msg) (interactive)
                                     (shell-command (concat "notify-send -i /usr/share/icons/gnome/32x32/status/appointment-soon.png '" (format "Appointment in %s min" min-to-app) "' '" msg "'")))
        )
  ;; add state to the sorting strategy of todo
  (setcdr (assq 'todo org-agenda-sorting-strategy) '(todo-state-up priority-down category-keep))
  ;; define todo states: set time stamps one waiting, delegated and done
  (setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "REMINDER(r)"
           "WAITING(w!)"
           "DELEGATED(g!)"
           "SOMEDAY(s)"
           "|"
           "DONE(d!)"
           )))
  
  (global-set-key (kbd "C-c A") 'org-agenda)
  (global-set-key (kbd "C-c a") (lambda () (interactive) (org-agenda nil "n")))
#+END_SRC

#+RESULTS:
| lambda | nil | (interactive) | (org-agenda nil n) |

*** org-reveal

#+BEGIN_SRC emacs-lisp
  (load "org-reveal")
  (define-key org-mode-map (kbd "C-c C-v") 'org-reveal-export-to-html)
#+END_SRC

*** php-mode

#+BEGIN_SRC emacs-lisp
  (require 'php-mode)
  (add-to-list 'auto-mode-alist '("\\.module\\'" . php-mode))
  (setq php-mode-coding-style "Symfony2")
  (setq php-template-compatibility nil)
  
  (let ((manual "/usr/share/doc/php-doc/html/"))
    (when (file-readable-p manual)
      (setq php-manual-path manual)))
  
  (defun setup-php-mode ()
    (require 'php-documentor nil t)
    (local-set-key (kbd "C-c p") 'php-documentor-dwim)
    (require 'php-align nil t)
    (php-align-setup)
    (php-eldoc-enable)
    (set-up-php-ac)
    )
  
  (add-hook 'php-mode-hook 'setup-php-mode)
  
  ;; die me some var_dump quickly
  (defun var_dump-die ()
    (interactive)
    (let ((expression (if (region-active-p)
                          (buffer-substring (region-beginning) (region-end))
                        (sexp-at-point)))
          (line (thing-at-point 'line))
          (pre "die(var_dump(")
          (post "));")
          )
      (if expression
          (progn
            (beginning-of-line)
            (if (string-match "return" line)
                (progn
                  (newline)
                  (previous-line))
              (next-line)
              (newline)
              (previous-line)
              )
            (insert pre)
            (insert (format "%s" expression))
            (insert post))
        ()
        (insert pre)
        (insert post)
        (backward-char (length post))
        )))
  (key-chord-define-global "bv" 'var_dump-die)
  (key-chord-define-global "pm" 'php-mode)
  
  (defun var_dump ()
    (interactive)
    (if (region-active-p)
      (progn
        (goto-char (region-end))
        (insert ");")
        (goto-char (region-beginning))
        (insert "var_dump("))
      (insert "var_dump();")
      (backward-char 3)
      ))
  
  (key-chord-define-global "dv" 'var_dump)
#+END_SRC

*** prog-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1))) ; show whitespace errors
#+END_SRC

*** projectile

#+BEGIN_SRC emacs-lisp
  (require 'projectile nil t)
  (setq projectile-completion-system 'grizzl)
  (key-chord-define-global "fr" 'projectile-find-file)
  (key-chord-define-global "rg" 'projectile-grep)
  (key-chord-define-global "ok" 'projectile-multi-occur)
  (key-chord-define-global "aw" 'projectile-ack)
#+END_SRC

*** rainbow-mode

#+BEGIN_SRC emacs-lisp
  (dolist (hook '(css-mode-hook
                  html-mode-hook
                  js-mode-hook
                  emacs-lisp-mode-hook
                  org-mode-hook
                  text-mode-hook
                  ))
    (add-hook hook 'rainbow-mode)
    )
#+END_SRC

*** rcirc

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'rcirc '(require 'rcirc-color))
  (setq rcirc-fill-column 'frame-width)
  (add-hook 'rcirc-mode-hook
            (lambda ()
              (flyspell-mode 1)
              (rcirc-omit-mode)
              (set (make-local-variable 'scroll-conservatively) 8192)))
  (global-set-key (kbd "C-c I") 'irc)
#+END_SRC

*** robe

#+BEGIN_SRC emacs-lisp
  (add-hook 'ruby-mode-hook
            (lambda ()
              (robe-mode 1)
              (push 'ac-source-robe ac-sources)))
#+END_SRC

*** saveplace

#+BEGIN_SRC emacs-lisp
  (require 'saveplace)
  (setq-default save-place t)
#+END_SRC

*** slime-js

#+BEGIN_SRC emacs-lisp
  (dolist (hook '(css-mode-hook
                  html-mode-hook
                  js-mode-hook))
    (add-hook hook (lambda ()
                     (when (fboundp 'slime-js-minor-mode)
                       (add-hook 'after-save-hook 'slime-js-reload nil 'make-it-local))
                     )
              ))
  
  ;; smart-mode-line
  (setq sml/show-encoding t)
  (setq sml/vc-mode-show-backend t)
  (setq sml/override-theme nil)
  (sml/setup)
  (set-face-attribute 'sml/prefix nil :foreground "#dcf692")
  (set-face-attribute 'sml/folder nil :foreground "#f09fff")
  (set-face-attribute 'sml/filename nil :foreground "#f6df92")
  (set-face-attribute 'sml/vc-edited nil :foreground "#ff5f87")
#+END_SRC

*** smartparens

#+BEGIN_SRC emacs-lisp
  (require 'smartparens-config)
  (smartparens-global-mode t)
  (define-key sp-keymap (kbd "M-o") 'sp-backward-sexp)
  (define-key sp-keymap (kbd "M-i") 'sp-forward-sexp)
  (define-key sp-keymap (kbd "C-{") 'sp-select-previous-thing)
  (define-key sp-keymap (kbd "C-}") 'sp-select-next-thing)
  (define-key sp-keymap (kbd "C-\\") 'sp-select-previous-thing-exchange)
  (define-key sp-keymap (kbd "C-]") 'sp-select-next-thing-exchange)
  ;; "fix"" highlight issue in scratch buffer
  (custom-set-faces '(sp-pair-overlay-face ((t ()))))
#+END_SRC

*** sgml

#+BEGIN_SRC emacs-lisp
  (setq sgml-basic-offset 4)
  (add-hook 'sgml-mode-hook 'sgml-electric-tag-pair-mode)
#+END_SRC

*** slime

#+BEGIN_SRC emacs-lisp
  (when (file-exists-p "~/quicklisp/slime-helper.el") (load "~/quicklisp/slime-helper.el"))
  (add-hook 'slime-mode-hook 'set-up-slime-ac)
  (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
  (eval-after-load "auto-complete"
    '(add-to-list 'ac-modes 'slime-repl-mode))
#+END_SRC

*** sql-completion

#+BEGIN_SRC emacs-lisp
  (when (require 'sql-completion nil t)
    (setq sql-interactive-mode-hook
          (lambda ()
            (define-key sql-interactive-mode-map "\t" 'comint-dynamic-complete)
            (sql-mysql-completion-init)))
    )
#+END_SRC

*** term-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'term-mode-hook (lambda()
                  (yas-minor-mode -1)))
#+END_SRC

*** tempo

#+BEGIN_SRC emacs-lisp
  (require 'tempo nil t)
#+END_SRC

*** uniqify

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-min-dir-content 2)
#+END_SRC

*** yasnippets

#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
  (setq yas-prompt-functions '(yas-completing-prompt yas-ido-prompt yas-x-prompt yas-dropdown-prompt yas-no-prompt))
#+END_SRC

*** visual-regexp

#+BEGIN_SRC emacs-lisp
  (key-chord-define-global "vr" 'vr/replace)
#+END_SRC

*** w3m, optional

#+BEGIN_SRC emacs-lisp
  (when (require 'w3m nil t)
    (setq
     w3m-use-favicon nil
     w3m-default-display-inline-images t
     w3m-search-word-at-point nil
     w3m-use-cookies t
     w3m-home-page "http://en.wikipedia.org/"
     w3m-cookie-accept-bad-cookies t
     w3m-session-crash-recovery nil)
    (add-hook 'w3m-mode-hook
              (function (lambda ()
                          (set-face-foreground 'w3m-anchor-face "LightSalmon")
                          (set-face-foreground 'w3m-arrived-anchor-face "LightGoldenrod")
                          ;;(set-face-background 'w3m-image-anchor "black")
                          (load "w3m-lnum")
                          (defun w3m-go-to-linknum ()
                            "Turn on link numbers and ask for one to go to."
                            (interactive)
                            (let ((active w3m-lnum-mode))
                              (when (not active) (w3m-lnum-mode))
                              (unwind-protect
                                  (w3m-move-numbered-anchor (read-number "Anchor number: "))
                                (when (not active) (w3m-lnum-mode))))
                            (w3m-view-this-url)
                            )
                          (define-key w3m-mode-map "f" 'w3m-go-to-linknum)
                          (define-key w3m-mode-map "L" 'w3m-lnum-mode)
                          (define-key w3m-mode-map "o" 'w3m-previous-anchor)
                          (define-key w3m-mode-map "i" 'w3m-next-anchor)
                          (define-key w3m-mode-map "w" 'w3m-search-new-session)
                          (define-key w3m-mode-map "p" 'w3m-previous-buffer)
                          (define-key w3m-mode-map "n" 'w3m-next-buffer)
                          (define-key w3m-mode-map "z" 'w3m-delete-buffer)
                          (define-key w3m-mode-map "O" 'w3m-goto-new-session-url)
                          )))
    )
#+END_SRC

*** whole-line-or-region // actually the defadvice works better than this mode

#+BEGIN_SRC emacs-lisp;(whole-line-or-region-mode 1)
#+END_SRC

*** yaml-mode

#+BEGIN_SRC emacs-lisp
  (setq yaml-indent-offset 4)
#+END_SRC

** end

*** turn on the keyboard overrides

#+BEGIN_SRC emacs-lisp
  (define-minor-mode my-keys-minor-mode
    "A minor mode so that my key settings override annoying major modes."
    t " K" 'my-keys-minor-mode-map)
  (my-keys-minor-mode 1)
#+END_SRC

*** makes it possible to do /sudo:host: , reads pws from ~/.authinfo.gpg

#+BEGIN_SRC emacs-lisp
  (add-to-list 'tramp-default-proxies-alist '(nil "\\`root\\'" "/ssh:%h:"))
  (add-to-list 'tramp-default-proxies-alist '((regexp-quote (system-name)) nil nil))
#+END_SRC

